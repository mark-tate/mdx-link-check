diff --git a/node_modules/marked/lib/marked.esm.js b/node_modules/marked/lib/marked.esm.js
index f58080f..73236aa 100644
--- a/node_modules/marked/lib/marked.esm.js
+++ b/node_modules/marked/lib/marked.esm.js
@@ -1149,6 +1149,9 @@ block.pedantic = merge$1({}, block.normal, {
  * Inline-Level Grammar
  */
 const inline = {
+  ss: '^ {0,3}(?:' // optional indentation
+      + '<[A-Z][a-zA-Z0-9]*\\s*to={?"([^"]*)"}?[^>]*>([^<]*)<\\/[A-Z][a-zA-Z0-9]*>' // (1)
+      + ')',
   escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
   autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
   url: noopTest$1,
@@ -1158,7 +1161,7 @@ const inline = {
     + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
     + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
     + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>', // CDATA section
-  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
+  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)|<[A-Z][a-zA-Z0-9]*\s*to={?"([^"]*)"}?[^>]*>([^<]*)<\/[A-Z][a-zA-Z0-9]*>/,
   reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
   nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
   reflinkSearch: 'reflink|nolink(?!\\()',
@@ -1404,6 +1407,7 @@ var Lexer_1 = class Lexer {
         rules.inline = inline$1.gfm;
       }
     }
+    console.log(rules);
     this.tokenizer.rules = rules;
   }
 
diff --git a/node_modules/marked/lib/marked.js b/node_modules/marked/lib/marked.js
index c867741..574e4f5 100644
--- a/node_modules/marked/lib/marked.js
+++ b/node_modules/marked/lib/marked.js
@@ -1116,6 +1116,9 @@
    */
 
   var block = {
+    link: '^ {0,3}(?:' // optional indentation
+        + '<[A-Z][a-zA-Z0-9]*\\s*to={?"([^"]*)"}?[^>]*>([^<]*)<\\/[A-Z][a-zA-Z0-9]*>' // (1)
+        + ')',
     newline: /^\n+/,
     code: /^( {4}[^\n]+\n*)+/,
     fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
@@ -1390,7 +1393,6 @@
           rules.inline = inline$1.gfm;
         }
       }
-
       this.tokenizer.rules = rules;
     }
     /**
diff --git a/node_modules/marked/src/Lexer.js b/node_modules/marked/src/Lexer.js
index 27a740c..6958576 100644
--- a/node_modules/marked/src/Lexer.js
+++ b/node_modules/marked/src/Lexer.js
@@ -193,6 +193,13 @@ module.exports = class Lexer {
         continue;
       }
 
+      // react
+      if (token = this.tokenizer.react(src)) {
+        src = src.substring(token.raw.length);
+        tokens.push(token);
+        continue;
+      }
+
       // html
       if (token = this.tokenizer.html(src)) {
         src = src.substring(token.raw.length);
@@ -368,6 +375,16 @@ module.exports = class Lexer {
         continue;
       }
 
+      // react
+      if (token = this.tokenizer.react(src)) {
+        src = src.substring(token.raw.length);
+        if (token.type === 'link') {
+          token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
+        }
+        tokens.push(token);
+        continue;
+      }
+
       // link
       if (token = this.tokenizer.link(src)) {
         src = src.substring(token.raw.length);
diff --git a/node_modules/marked/src/Parser.js b/node_modules/marked/src/Parser.js
index 81fcb7d..eb8c7f8 100644
--- a/node_modules/marked/src/Parser.js
+++ b/node_modules/marked/src/Parser.js
@@ -161,6 +161,7 @@ module.exports = class Parser {
           out += this.renderer.list(body, ordered, start);
           continue;
         }
+        case 'link':
         case 'html': {
           // TODO parse inline content if parameter markdown=1
           out += this.renderer.html(token.text);
diff --git a/node_modules/marked/src/rules.js b/node_modules/marked/src/rules.js
index 8b0aa72..311f922 100644
--- a/node_modules/marked/src/rules.js
+++ b/node_modules/marked/src/rules.js
@@ -8,6 +8,7 @@ const {
  * Block-Level Grammar
  */
 const block = {
+  react: /^ {0,3}(?:<[A-Z][a-zA-Z0-9]*\s*to={?"([^"]*)"}?[^>]*>([^<]*)<\/[A-Z][a-zA-Z0-9]*>)/,
   newline: /^\n+/,
   code: /^( {4}[^\n]+\n*)+/,
   fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
@@ -160,11 +161,12 @@ block.pedantic = merge({}, block.normal, {
  * Inline-Level Grammar
  */
 const inline = {
+  react: /<[A-Z][a-zA-Z0-9]*\s*to={?"([^"]*)"}?[^>]*>([^<]*)<\/[A-Z][a-zA-Z0-9]*>/,
   escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
   autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
   url: noopTest,
   tag: '^comment'
-    + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
+     + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
     + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
     + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
     + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
